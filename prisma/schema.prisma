// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider  = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url       = env("DATABASE_URL")
    directUrl = env("DIRECT_URL")
}

// projects - id, creator, name, description, createdAt
// tasks - title, description, tags[], createdAt, deadline, assignedTo, project_id
// user - id, email, passwordHash, createdAt
// userProjects - user_id, project_id, createdAt

model Projects {
    id          Int            @id @default(autoincrement())
    creator     User           @relation(fields: [creatorId], references: [id])
    creatorId   String
    createdAt   DateTime       @default(now())
    description String
    members     UserProjects[]
}

model User {
    id              String         @id @default(cuid())
    name            String
    email           String         @unique
    emailVerified   Boolean        @default(false)
    projectsCreated Projects[]
    tasksAssigned   Tasks[]
    projects        UserProjects[]
}

model Tasks {
    id          Int      @id @default(autoincrement())
    title       String
    description String
    tags        String[]
    createdAt   DateTime @default(now())
    deadline    DateTime
    assignee    User     @relation(fields: [assigneeId], references: [id])
    assigneeId  String
}

model UserProjects {
    id        Int      @id @default(autoincrement())
    user      User     @relation(fields: [userId], references: [id])
    userId    String
    project   Projects @relation(fields: [projectId], references: [id])
    projectId Int
    createdAt DateTime @default(now())
}
